/*
    Tryton Android
    Copyright (C) 2012 SARL SCOP Scil (contact@scil.coop)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package org.tryton.client.models;

import java.io.IOException;
import java.io.Serializable;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.Set;
import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONException;

/** The representation of a generic model. It can either be some data
 * fields definition... */
public class Model implements Serializable {

    /** Autogenerated serial UID */
    static final long serialVersionUID = 6829071072804996668L;
    
    private String className;
    private Map<String, Object> attributes;
    private Map<String, Model> toOne;
    private Map<String, List<Model>> toMany;
    /** List of not saved models indexed by one2many field name.
     * These models may not have an id field. Other relationnal fields
     * are directly saved. */
    private Map<String, List<Model>> one2ManyOperations;
    /** Id used internally to verify if 2 models are the same
     * (for one2many create and update) */
    private long innerId;

    public Model(String className) {
        this.className = className;
        this.attributes = new TreeMap<String, Object>();
        this.toOne = new TreeMap<String, Model>();
        this.toMany = new TreeMap<String, List<Model>>();
        this.one2ManyOperations = new TreeMap<String, List<Model>>();
        this.innerId = (long) (Math.random() * (Long.MAX_VALUE - 1));
    }
    
    /** Convert JSONObject to a map of attributes. */
    private Map<String, Object> convertJSONObject(JSONObject o) {
        if (o == JSONObject.NULL) {
            return null;
        }
        Map<String, Object> value = new TreeMap<String, Object>();
        JSONArray keys = o.names();
        if (keys == null) {
            return value;
        }
        for (int i = 0; i < keys.length(); i++) {
            try {
                String name= keys.getString(i);
                Object subvalue = o.get(name);
                if (subvalue == JSONObject.NULL) {
                    value.put(name, null);
                } else if (subvalue instanceof JSONObject) {
                    Map<String, Object> mValue = this.convertJSONObject((JSONObject) subvalue);
                    value.put(name, mValue);
                } else if (subvalue instanceof JSONArray) {
                    List<Object> lValue = this.convertJSONArray((JSONArray) subvalue);
                    value.put(name, lValue);
                } else {
                    value.put(name, subvalue);
                }
            } catch (JSONException e) {
                // Unreachable
            }
        }
        return value;
    }

    /** Convert JSONArray to List. */
    private List<Object> convertJSONArray(JSONArray o) {
        List<Object> value = new ArrayList<Object>();
        for (int i = 0; i < o.length(); i++) {
            try {
                Object subvalue = o.get(i);
                if (subvalue == JSONObject.NULL) {
                    value.add(null);
                } else if (subvalue instanceof JSONObject) {
                    Map mValue = this.convertJSONObject((JSONObject) subvalue);
                    value.add(mValue);
                } else if (subvalue instanceof JSONArray) {
                    List lValue = this.convertJSONArray((JSONArray) subvalue);
                    value.add(lValue);
                } else {
                    value.add(subvalue);
                }
            } catch (JSONException e) {
                // Unreachable
            }
        }
        return value;
    }
    
    public Model(String className, JSONObject model) {
        this.className = className;
        this.attributes = this.convertJSONObject(model);
        this.toOne = new TreeMap<String, Model>();
        this.toMany = new TreeMap<String, List<Model>>();
    }

    public String getClassName() {
        return this.className;
    }
    
    /** Get all attribute names */
    public Set<String> getAttributeNames() {
        return this.attributes.keySet();
    }

    public boolean hasAttribute(String attributeName) {
        return this.attributes.containsKey(attributeName);
    }

    /** Get the value of an attribute */
    public Object get(String attributeName) {
        return this.attributes.get(attributeName);
    }

    /** Get the value of a string attribute.
        Returns null if it is not a string */
    public String getString(String attributeName) {
        Object value = this.attributes.get(attributeName);
        if (value instanceof String) {
            return (String) value;
        }
        return null;
    }

    public void set(String name, Object value) {
        this.attributes.put(name, value);
    }

    public void set2One(String name, Model value) {
        this.toOne.put(name, value);
    }

    public String get2OneName(String name) {
        Model rel = this.toOne.get(name);
        if (rel != null) {
            return rel.getString("rec_name");
        } else {
            return null;
        }
    }

    /** Get all relationnal models registered for this model. */
    public List<Model> getRelModels() {
        List<Model> ret = new ArrayList<Model>();
        for (String field : this.toOne.keySet()) {
            ret.add(this.toOne.get(field));
        }
        for (String field : this.toMany.keySet()) {
            ret.addAll(this.toMany.get(field));
        }
        return ret;
    }

    /** Add a model to a many2many or one2many fields.
     * To limit memory usage the model should be light. */
    @SuppressWarnings("unchecked")
    public void add2Many(String name, Model value) {
        if ((this.toMany.get(name) == null)) {
            this.toMany.put(name, new ArrayList<Model>());
        }
        this.toMany.get(name).add(value);
    }

    @SuppressWarnings("unchecked")
    public void addNewOne2Many(String fieldName, Model newModel) {
        if (this.one2ManyOperations.get(fieldName) == null) {
            this.one2ManyOperations.put(fieldName, new ArrayList<Model>());
        }
        this.one2ManyOperations.get(fieldName).add(newModel);
        // Add null to the field ids to indicate something was new
        if (!this.hasAttribute(fieldName)
            || this.get(fieldName) == null) {
            this.attributes.put(fieldName, new ArrayList<Integer>());
        }
        ((List<Model>)this.attributes.get(fieldName)).add(null);
    }
    public void editOne2Many(String fieldName, Model oldValue, Model newValue) {
        // identify old and replace
        List<Model> one2many = this.one2ManyOperations.get(fieldName);
        for (int i = 0; i < one2many.size(); i++) {
            Model m = one2many.get(i);
            if (m.innerId == oldValue.innerId) {
                one2many.remove(i);
                one2many.add(i, newValue);
            }
        }
    }
    public List<Model> getOne2ManyOperations(String fieldName) {
        return this.one2ManyOperations.get(fieldName);
    }

    /** Set human readable form for debugging */
    @Override
    public String toString() {
        Object oName = this.attributes.get("name");
        if (oName != null && oName instanceof String) {
            return this.className + ":" + ((String) oName);
        } else {
            return super.toString();
        }
    }

    /** Merge current values with values from m. Current values will be
     * replaced by m values when overlapping */
    public void merge(Model m) {
        for (String attr : m.getAttributeNames()) {
            this.set(attr, m.get(attr));
        }
    }

    /** Convert this model to raw bytes to store it */
    public byte[] toByteArray() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
        ObjectOutputStream oos = new ObjectOutputStream(bos);
        oos.writeObject(this.className);
        oos.writeObject(this.attributes);
        byte[] data = bos.toByteArray();
        oos.close();
        return data;
    }

    public static Model fromByteArray(byte[] data) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        ObjectInputStream ois = new ObjectInputStream(bis);
        Model m = null;
        try {
            @SuppressWarnings("unchecked")
            String className = (String) ois.readObject();
            @SuppressWarnings("unchecked")
            Map<String, Object> attrs = (Map<String, Object>) ois.readObject();
            m = new Model(className);
            m.attributes = attrs;
        } catch (ClassNotFoundException e) {
            // Means that the data are wrong. Stay null.
        }
        ois.close();
        return m;
    }
}